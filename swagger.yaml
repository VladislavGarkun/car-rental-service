swagger: "2.0"
info:
  description: "This is a sample server Car Rental server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "Swagger Car Rental"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost"
basePath: "/v2"
tags:
- name: "car"
  description: "Everything about your Cars"
- name: "rental"
  description: "Access to Car Rental orders"
- name: "user"
  description: "Everising about User"

schemes:
- "http"

paths:
  /car:
    post:
      tags:
      - "car"
      summary: "Add a new car to the rent"
      operationId: "addCar"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Car object that need to be added to the rent"
        required: true
        schema:
          $ref: "#/definitions/Car"
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad request"
    
  /car/{carId}:
    get:
      tags:
      - "car"
      summary: "Find car by id"
      description: "Return a single car"
      operationId: "getCarById"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "carId"
        description: "Id of the car to return"
        required: true
        type: "integer"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Car"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Car not found"
          
    put:
      tags:
      - "car"
      summary: "Updates the car"
      description: "Update a single car"
      operationId: "updateCar"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "carId"
        description: "Id of the pet to update"
        required: true
        type: "integer"
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad request"
        "404":
          description: "Car not found"
      
  /rental/order:
    post:
      tags:
      - "rental"
      summary: "Create order to rent a car"
      description: ""
      operationId: "Add order"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Order data"
        required: true
        schema:
          $ref: "#/definitions/Order"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Invalid Order"
        "404":
          description: "Rental not found"

  /rental/order/{orderId}:
    get:
      tags:
      - "rental"
      summary: "Find  order by ID"
      operationId: "getOrderById"
      produces:
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of order to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Rental not found"
    put:
      tags:
      - "rental"
      summary: "Updates the order"
      description: "Update a single order"
      operationId: "updateOrderId"
      consumes:
      - "application/json"
      parameters:
      - in: "path"
        name: "orderId"
        description: "Id of the order to update"
        required: true
        type: "integer"
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad request"
        "404":
          description: "Rental not found"
          
          
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "Create a user account"
      operationId: "createUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User object that need to be added to the data base"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"


  /users:
    post:
      tags:
        - "user"
      summary: "Creates list of users with given input array"
      operationId: "createUsers"
      produces:
      - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "List of user object"
          required: true
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"

  /user/login:
    post:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: "Logs in user if the email and password are valid"
      operationId: "loginUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User login and password"
        required: true
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
        "404":
          description: "User not found"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{userName}:
    get:
      tags:
      - "user"
      summary: "Get user by id"
      description: ""
      operationId: "getUserById"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "Id of the user to return"
        required: true
        type: "string"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/User"
        "204":
          description: "User not found"
        "400":
          description: "Bad request"

    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "user id that need to be updated"
        required: true
        type: "string"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"

securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Car:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      brand:
        type: "string"
      body:
        type: "string"
      yearofissue:
        type: "integer"
        format: "int32"
      numberofseats: 
        type: "integer"
        format: "int32"
      transmission: 
        type: "string"
      price:
        type: "number"
        format: "float"
      status:
        type: "string"
        description: "Car status in the rental"
        enum:
        - "available"
        - "rented"
      photoUrls:
        type: "array"
        items:
          type: "string"


  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      carId:
        type: "integer"
        format: "int64"
      userId:
        type: "integer"
        format: "int64"
      startDate:
        type: "string"
        format: "date-time"
      endDate:
        type: "string"
        format: "date-time"
      price:
        type: "number"
        format: "float"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "denied"
        - "approved"
        - "active"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"

  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      userName:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"